/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estacionamento;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andrei
 */
public class Visual extends javax.swing.JFrame {


    public Visual() {
        initComponents();
        
        labelChassi.setVisible(false);
        textoChassi.setVisible(false);
        
        labelID.setVisible(false);
        textoID.setVisible(false);
        botaoOKID.setVisible(false);
        botaoOKProcurar.setVisible(false);

        textoInicio.setVisible(false);
        horarioInicio.setVisible(false);
        
        textoReinicio.setVisible(false);
        horarioReinicio.setVisible(false);
        
        textoChassi.setFocusTraversalKeysEnabled(false);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entrarBotao = new javax.swing.JButton();
        abrirBotao = new javax.swing.JButton();
        pesquisarBotao = new javax.swing.JButton();
        sairBotao = new javax.swing.JButton();
        salvarBotao = new javax.swing.JButton();
        relatoriosBotao = new javax.swing.JButton();
        fimBotao = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaVagas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaCarros = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        labelChassi = new javax.swing.JLabel();
        textoChassi = new javax.swing.JTextField();
        labelID = new javax.swing.JLabel();
        textoID = new javax.swing.JTextField();
        botaoOKID = new javax.swing.JButton();
        horarioInicio = new javax.swing.JLabel();
        textoInicio = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        botaoOKProcurar = new javax.swing.JButton();
        textoReinicio = new javax.swing.JLabel();
        horarioReinicio = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Sistema De Estacionamento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        entrarBotao.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        entrarBotao.setText("Entrar");
        entrarBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrarBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(entrarBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 29, 115, 51));

        abrirBotao.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        abrirBotao.setText("Abrir");
        abrirBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(abrirBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 29, 115, 51));

        pesquisarBotao.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        pesquisarBotao.setText("Pesquisar");
        pesquisarBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(pesquisarBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 29, 115, 51));

        sairBotao.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        sairBotao.setText("Sair");
        sairBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(sairBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(434, 29, 115, 51));

        salvarBotao.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        salvarBotao.setText("Salvar");
        salvarBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(salvarBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(567, 29, 115, 51));

        relatoriosBotao.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        relatoriosBotao.setText("Relatório");
        relatoriosBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relatoriosBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(relatoriosBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 29, 115, 51));

        fimBotao.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        fimBotao.setText("Fim");
        fimBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fimBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(fimBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(833, 29, 115, 51));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 98, 985, 10));

        tabelaVagas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tabelaVagas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identificação", "Peso Máximo", "Altura Máx.", "Comprimento Máx.", "Largura Máx.", "Disponibilidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaVagas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaVagas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaVagasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaVagas);
        if (tabelaVagas.getColumnModel().getColumnCount() > 0) {
            tabelaVagas.getColumnModel().getColumn(0).setResizable(false);
            tabelaVagas.getColumnModel().getColumn(1).setResizable(false);
            tabelaVagas.getColumnModel().getColumn(2).setResizable(false);
            tabelaVagas.getColumnModel().getColumn(3).setResizable(false);
            tabelaVagas.getColumnModel().getColumn(4).setResizable(false);
            tabelaVagas.getColumnModel().getColumn(5).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 430, 965, 186));

        tabelaCarros.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tabelaCarros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Modelo", "Nº Chassi", "Peso", "Altura", "Comprimento", "Largura"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaCarros.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaCarros.getTableHeader().setReorderingAllowed(false);
        tabelaCarros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaCarrosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaCarros);
        if (tabelaCarros.getColumnModel().getColumnCount() > 0) {
            tabelaCarros.getColumnModel().getColumn(0).setResizable(false);
            tabelaCarros.getColumnModel().getColumn(1).setResizable(false);
            tabelaCarros.getColumnModel().getColumn(2).setResizable(false);
            tabelaCarros.getColumnModel().getColumn(3).setResizable(false);
            tabelaCarros.getColumnModel().getColumn(4).setResizable(false);
            tabelaCarros.getColumnModel().getColumn(5).setResizable(false);
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 143, 965, 188));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Fila de Carros:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 118, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Lista de Vagas:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 342, 985, 10));
        getContentPane().add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 985, 10));

        labelChassi.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelChassi.setForeground(new java.awt.Color(255, 0, 51));
        labelChassi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelChassi.setText("Digite o Chassi do veículo desejado:");
        labelChassi.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(labelChassi, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 259, 30));

        textoChassi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        textoChassi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textoChassiKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textoChassiKeyTyped(evt);
            }
        });
        getContentPane().add(textoChassi, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 350, 110, 30));

        labelID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelID.setForeground(new java.awt.Color(255, 0, 51));
        labelID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelID.setText("Digite o ID da vaga desejada:");
        labelID.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(labelID, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 350, 259, 30));

        textoID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        textoID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textoIDKeyTyped(evt);
            }
        });
        getContentPane().add(textoID, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 350, 100, 30));

        botaoOKID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botaoOKID.setText("Confirmar");
        botaoOKID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoOKIDActionPerformed(evt);
            }
        });
        getContentPane().add(botaoOKID, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 350, 110, 30));

        horarioInicio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        horarioInicio.setForeground(new java.awt.Color(51, 51, 51));
        horarioInicio.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getContentPane().add(horarioInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 260, 30));

        textoInicio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textoInicio.setForeground(new java.awt.Color(51, 51, 51));
        textoInicio.setText("Início da Execução:");
        getContentPane().add(textoInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 4, 120, 20));
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 640, -1, -1));

        botaoOKProcurar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botaoOKProcurar.setText("Confirmar");
        botaoOKProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoOKProcurarActionPerformed(evt);
            }
        });
        getContentPane().add(botaoOKProcurar, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 350, 110, 30));

        textoReinicio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textoReinicio.setForeground(new java.awt.Color(51, 51, 51));
        textoReinicio.setText("Reinício da Execução:");
        getContentPane().add(textoReinicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 0, 140, 30));

        horarioReinicio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        horarioReinicio.setForeground(new java.awt.Color(51, 51, 51));
        horarioReinicio.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getContentPane().add(horarioReinicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 0, 260, 30));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    /*
    Ao escolher a opção de abrir, pergunta se quer carregar simulação ou iniciar uma nova.
    Em ambos os casos, os arquivos contendo as informações de carros e vagas são colocado nas respectivas tabelas. A diferença é a 
    origem das informações, que podem ser dos .txt ou dos binários previamente salvos pelo usuário.
    */
    private void abrirBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirBotaoActionPerformed
        
        labelChassi.setVisible(false);
        textoChassi.setVisible(false);
        
        labelID.setVisible(false);
        textoID.setVisible(false);
        botaoOKID.setVisible(false);
        botaoOKProcurar.setVisible(false);
        
        Object[] opcoes = {"Nova","Carregar"};        
        int n = JOptionPane.showOptionDialog(this,"Criar ou carregar simulação?","Entrar",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,opcoes,opcoes[1]);
        ArrayList<Veiculo> listaVeiculos = new ArrayList();
        Relatorio vagas = new Relatorio();

        ManipulaTabelas manipTab = new ManipulaTabelas(this,null);
        
        if(n==0)
        {
            textoReinicio.setVisible(false);
            horarioReinicio.setVisible(false);
            
            try {
                String dataInicio;
                dataInicio = ManipuladorDeArquivos.escreverInicioLog(); //Escreve no arquivo de log o horário de inicio.
                
                dataInicio = dataInicio.replace("'", ":");
                dataInicio = dataInicio.replace(" de ", "/");
                
                textoInicio.setVisible(true);
                horarioInicio.setText(dataInicio);
                horarioInicio.setVisible(true); // Mostra na janela o horário de inicio da simulação.
                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,"Erro ao escrever arquivo de log!","Erro",JOptionPane.ERROR_MESSAGE);
            }
            //Le arquivo.
            try {
                listaVeiculos = ManipuladorDeArquivos.lerVeiculos();
                vagas = ManipuladorDeArquivos.lerVagas();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,"Erro ao carregar arquivo!","Erro",JOptionPane.ERROR_MESSAGE);
            }
            
           manipTab.preencheCarros(listaVeiculos);
           manipTab.preencheVagas();
           
        }else if(n==1){
            ManipuladorDeArquivos manip = new ManipuladorDeArquivos();
            String data="";
            try {
                data = manip.carregaExecucao(this);
            } catch (IOException ex) {
                Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
            }
        if(!data.equals("")){
            String horaReinicio="";
                try {
                    horaReinicio = ManipuladorDeArquivos.escreverReinicioLog(data);
                } catch (IOException ex) {
                    Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
                }
            data =  data.replace("'", ":");
            data = data.replace(" de ", "/");

            horaReinicio =  horaReinicio.replace("'", ":");
            horaReinicio = horaReinicio.replace(" de ", "/");

            textoInicio.setVisible(true);
            horarioInicio.setText(data);
            horarioInicio.setVisible(true);


            textoReinicio.setVisible(true);
            horarioReinicio.setText(horaReinicio);
            horarioReinicio.setVisible(true);
            }
        }
        
        
    }//GEN-LAST:event_abrirBotaoActionPerformed
    
    /*
    Ao clicar no botão entrar, 2 caixas de textos e um botão de confirmar aparecem para colocar o chassi do carro a ser estacionado e o ID da vaga.
    */
    private void entrarBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrarBotaoActionPerformed
        
        if(tabelaCarros.getRowCount() == 0)
            JOptionPane.showMessageDialog(this,"Lista de Carros Vazia!","Erro",JOptionPane.ERROR_MESSAGE);
        else{
        labelChassi.setVisible(true);
        textoChassi.setVisible(true);
        
        labelID.setVisible(true);
        textoID.setVisible(true);
        botaoOKID.setVisible(true);
        botaoOKProcurar.setVisible(false);
        textoChassi.requestFocus();
        }
    }//GEN-LAST:event_entrarBotaoActionPerformed
    
    /*
    Ao clicar no botão de confirmação, é verificado se o carro pode ir pra vaga, todo o processo de log e relatório é feito e se caso o carro for pra vaga, ele é excluido da lista
    e a vaga se torna ocupada.
    */
    private void botaoOKIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoOKIDActionPerformed
        
        if(textoChassi.getText().trim().equals("")  && textoID.getText().trim().equals(""))
                JOptionPane.showMessageDialog(this,"Número de Chassi e ID da vaga não preenchidos.","Erro",JOptionPane.ERROR_MESSAGE);
        else if(textoChassi.getText().trim().equals(""))
                JOptionPane.showMessageDialog(this,"Numero de Chassi não preenchido.","Erro",JOptionPane.ERROR_MESSAGE);
        else if(textoID.getText().trim().equals(""))
                 JOptionPane.showMessageDialog(this,"ID da vaga não preenchido.","Erro",JOptionPane.ERROR_MESSAGE);
        else
        {
            ArrayList<Veiculo> listaCarros;
            ArrayList<Vaga> listaVagas;
            Veiculo veiculo = null;
            Relatorio listaDeVagas = new Relatorio();
            listaDeVagas.getInstance();
            
            Vaga vaga = null;
            int chassi = Integer.valueOf(textoChassi.getText().trim());
            int ID = Integer.valueOf(textoID.getText().trim());
            
            listaCarros = veiculo.carregaDaTabelaCarros(this);
            listaVagas = listaDeVagas.getListaVagas();
            
            int contadorCarro=0;
            int contador=0;
            for(Veiculo X: listaCarros){
                if(X.getChassi()== chassi){
                    veiculo = X;
                    contadorCarro=contador;
                    }
                else
                contador++;
            }
            
            if(veiculo == null)
                JOptionPane.showMessageDialog(this,"Veiculo com chassi "+chassi+" não está na fila!","Erro",JOptionPane.ERROR_MESSAGE);
            else{
                int contadorVaga=0;
                 int contador1=0;
                for(Vaga X: listaVagas){
                    if(X.getID()== ID){
                        vaga = X;
                        contadorVaga=contador1;
                        }
                    else
                        contador1++;
                }
                if(vaga == null)
                JOptionPane.showMessageDialog(this,"Vaga com ID "+ID+" não encontrada!","Erro",JOptionPane.ERROR_MESSAGE);
                else{
                    int x = Vaga.verificaVaga(veiculo, vaga);
                    String aux = horarioInicio.getText().replace(":", "'");
                    aux = aux.replace("/", " de ");
                    String nomeArquivo = aux;
                    ManipuladorDeArquivos manip2 = new ManipuladorDeArquivos();
                    if(x==1)
                    { 
                        ManipulaTabelas manip = new ManipulaTabelas(this,null);
                        
                        
                        manip.deletaLinhaCarro(contadorCarro);
                        manip.trancaVaga(contadorVaga);
                        
                        try {
                            manip2.registraLog("entrada","sucesso",String.valueOf(chassi),String.valueOf(ID),nomeArquivo);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(this,"Erro ao adicionar linha de log.","Erro",JOptionPane.ERROR_MESSAGE);
                        }
                        vaga.setDisponivel(false);
                        vaga.incVezesUsada();
                        vaga.veiculosEstacionados.add(veiculo);
                        
                        listaDeVagas.getListaVagas().set(contadorVaga, vaga);
                        
                        JOptionPane.showMessageDialog(this,"Veiculo "+veiculo.getModelo()+ " com chassi "+veiculo.getChassi()+ " estacionado com sucesso na vaga "+ vaga.getID()+"." ,"Sucesso!",JOptionPane.INFORMATION_MESSAGE);
                        
                    }
                    else if(x==0)
                    {
                        try {
                            manip2.registraLog("entrada","falha",String.valueOf(chassi),String.valueOf(ID),nomeArquivo);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(this,"Erro ao adicionar linha de log.","Erro",JOptionPane.ERROR_MESSAGE);
                        }
                        vaga.incFalhasUso();
                        listaDeVagas.getListaVagas().set(contadorVaga, vaga);
                        
                        JOptionPane.showMessageDialog(this,"Vaga ocupada!","Erro",JOptionPane.ERROR_MESSAGE);
                        
                    }else if(x==2){
                        try {
                            manip2.registraLog("entrada","falha",String.valueOf(chassi),String.valueOf(ID),nomeArquivo);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(this,"Erro ao adicionar linha de log.","Erro",JOptionPane.ERROR_MESSAGE);
                        }
                        vaga.incFalhasUso();
                        listaDeVagas.getListaVagas().set(contadorVaga, vaga);
                        
                        JOptionPane.showMessageDialog(this,"Vaga "+vaga.getID()+" não comporta o veículo "+veiculo.getModelo()+".","Erro",JOptionPane.ERROR_MESSAGE);
                    }
                    
                }
                   
            }
        }
     
        textoID.setText(" ");
        
   
    }//GEN-LAST:event_botaoOKIDActionPerformed

    //Ao clicar em fim, pergunta se o usuário realmente deseja finalizar, e se caso responder sim, salva o log com o horario correspondente.
    private void fimBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fimBotaoActionPerformed
        
        int n = JOptionPane.showConfirmDialog(this,"Deseja realmente finalizar a execução?","Sair?",JOptionPane.YES_NO_OPTION);
        if(n==0){
            if(tabelaVagas.getRowCount()>0){
                try {
                    String aux = horarioInicio.getText().replace(":", "'");
                    aux = aux.replace("/", " de ");
                    String nomeArquivo = aux;
                    ManipuladorDeArquivos.escreverFimLog(nomeArquivo);
                } catch (IOException ex) {
                    Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        System.exit(0);
        }
    }//GEN-LAST:event_fimBotaoActionPerformed

    /*
    Caso o Usuário clicar TAB na caixa texto onde coloca o chassi, já pula pra caixa de texto pra colocar o ID.
    */
    private void textoChassiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoChassiKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_TAB)
         textoID.requestFocus();  
    }//GEN-LAST:event_textoChassiKeyPressed
    
    //Ao clicar em uma linha da tabela de carros, ja transfere o numero de chassi pro respectivo textBox.
    private void tabelaCarrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaCarrosMouseClicked
       
       DefaultTableModel model = (DefaultTableModel) tabelaCarros.getModel();
       textoChassi.setText(model.getValueAt(tabelaCarros.getSelectedRow(), 1).toString());
    }//GEN-LAST:event_tabelaCarrosMouseClicked
    
    //Ao clicar em uma linha da tabela de vagas, ja transfere o numero de ID pro respectivo textBox.
    private void tabelaVagasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaVagasMouseClicked
        
       DefaultTableModel model = (DefaultTableModel) tabelaVagas.getModel();
       textoID.setText(model.getValueAt(tabelaVagas.getSelectedRow(), 0).toString());
    }//GEN-LAST:event_tabelaVagasMouseClicked
    
    //Abre a janela de relatório, pra vizualizar e poder salvá-lo e esconde a janela principal.
    private void relatoriosBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relatoriosBotaoActionPerformed
            if(!horarioInicio.getText().equals("")){
            labelChassi.setVisible(false);
            textoChassi.setVisible(false);

            labelID.setVisible(false);
            textoID.setVisible(false);
            botaoOKID.setVisible(false);
            botaoOKProcurar.setVisible(false);

            this.setVisible(false);
            RelatorioVisual nova = new RelatorioVisual(this);
            nova.setAlwaysOnTop(true);
            nova.setLocationRelativeTo(this);
            nova.setVisible(true);
            }
    }//GEN-LAST:event_relatoriosBotaoActionPerformed

    //Ao clicar no botão de OK, da aba procurar, ele verifica a primeira vaga disponivel e pergunta se deseja estacionar o carro.
    private void botaoOKProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoOKProcurarActionPerformed
         if(textoChassi.getText().equals(""))
         JOptionPane.showMessageDialog(this,"Degite um número de chassi ou selecione na tabela de carros.","Erro",JOptionPane.ERROR_MESSAGE);
         else{
         ArrayList<Veiculo> listaCarros = new ArrayList();
         Vaga vaga = null;
         Relatorio relatorio = new Relatorio();
         relatorio.getInstance();
         Veiculo veiculo = null;
         String aux = horarioInicio.getText().replace(":", "'");
         aux = aux.replace("/", " de ");
         String nomeArquivo = aux;
         
         int chassi = Integer.valueOf(textoChassi.getText().trim());
         ManipuladorDeArquivos manip = new ManipuladorDeArquivos();
         ManipulaTabelas manip2 = new ManipulaTabelas(this,null);
         listaCarros = veiculo.carregaDaTabelaCarros(this);
         int contadorCarro=0;
         int contador=0;
            for(Veiculo X: listaCarros){
                if(X.getChassi()== chassi){
                    veiculo = X;
                    contadorCarro=contador;
                    }
                else
                contador++;
            }

            if(veiculo == null)
                JOptionPane.showMessageDialog(this,"Veiculo com chassi "+chassi+" não está na fila!","Erro",JOptionPane.ERROR_MESSAGE);
            else{
                vaga = veiculo.procuraMelhorVaga(veiculo);
                
                if(vaga == null){
                   JOptionPane.showMessageDialog(this,"Nenhuma vaga compatível com o veículo "+veiculo.getModelo()+" chassi "+veiculo.getChassi()+".","Erro",JOptionPane.ERROR_MESSAGE);
                    try { 
                        manip.registraLog("entrada","falha",String.valueOf(chassi)," --- ",nomeArquivo);
                    } catch (IOException ex) {
                        Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else{
                    int contadorVaga = vaga.getPosicaoVaga(vaga);
                    Object[] opcoes = {"Sim","Não"};        
                    int n = JOptionPane.showOptionDialog(this,"Vaga encontrada!\nID:"+vaga.getID()+"\nDeseja colocar o carro "+veiculo.getModelo()+" de chassi "+veiculo.getChassi()+" nessa vaga?","Entrar",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,opcoes,opcoes[1]);
                    
                        if(n==0)
                        {
                        
                        manip2.deletaLinhaCarro(contadorCarro);
                        manip2.trancaVaga(contadorVaga);
                        
                        try {
                            manip.registraLog("entrada","sucesso",String.valueOf(chassi),String.valueOf(vaga.getID()),nomeArquivo);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(this,"Erro ao adicionar linha de log.","Erro",JOptionPane.ERROR_MESSAGE);
                        }
                        vaga.setDisponivel(false);
                        vaga.incVezesUsada();
                        vaga.veiculosEstacionados.add(veiculo);
                        
                        relatorio.getListaVagas().set(contadorVaga, vaga);
                        
                        JOptionPane.showMessageDialog(this,"Veiculo "+veiculo.getModelo()+ " com chassi "+veiculo.getChassi()+ " estacionado com sucesso na vaga "+ vaga.getID()+"." ,"Sucesso!",JOptionPane.INFORMATION_MESSAGE);
                        }    
                    }
                }
        }
         
         
    }//GEN-LAST:event_botaoOKProcurarActionPerformed
    
    //Mostra os textBoxs e labels necessários pra execução da ação PROCURAR. e Esconde os desnecessários.
    private void pesquisarBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarBotaoActionPerformed
        
        if(tabelaCarros.getRowCount() == 0)
            JOptionPane.showMessageDialog(this,"Lista de Carros Vazia!","Erro",JOptionPane.ERROR_MESSAGE);
        else{
        labelChassi.setVisible(true);
        textoChassi.setVisible(true);
        
        labelID.setVisible(false);
        textoID.setVisible(false);
        botaoOKID.setVisible(false);
        botaoOKProcurar.setVisible(true);
        }
    }//GEN-LAST:event_pesquisarBotaoActionPerformed

    //Restringe os textBox a receberem apenas numeros.
    private void textoIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoIDKeyTyped
        String caracteres="0987654321";
        if(!caracteres.contains(evt.getKeyChar()+"")){
        evt.consume();
        }
    }//GEN-LAST:event_textoIDKeyTyped

    //Restringe os textBox a receberem apenas numeros.
    private void textoChassiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoChassiKeyTyped
        String caracteres="0987654321";
        if(!caracteres.contains(evt.getKeyChar()+"")){
        evt.consume();
        }
    }//GEN-LAST:event_textoChassiKeyTyped
    
    //Ao clicar no botão sair, fecha a janela principal e abre a janela de sair.
    private void sairBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairBotaoActionPerformed
        labelChassi.setVisible(false);
        textoChassi.setVisible(false);
        
        labelID.setVisible(false);
        textoID.setVisible(false);
        botaoOKID.setVisible(false);
        botaoOKProcurar.setVisible(false);
        
        this.setVisible(false);
        VisualSair nova = new VisualSair(this);
        nova.setAlwaysOnTop(true);
        nova.setLocationRelativeTo(this);
        nova.setVisible(true);

    }//GEN-LAST:event_sairBotaoActionPerformed
    
    //Ao clicar em fim, pergunta se o usuário realmente deseja finalizar, e se caso responder sim, salva o log com o horario correspondente.
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int n = JOptionPane.showConfirmDialog(this,"Deseja realmente finalizar a execução?","Sair?",JOptionPane.YES_NO_OPTION);
        if(n==0){
            if(tabelaVagas.getRowCount()>0){
                try {
                    String aux = horarioInicio.getText().replace(":", "'");
                    aux = aux.replace("/", " de ");
                    String nomeArquivo = aux;
                    ManipuladorDeArquivos.escreverFimLog(nomeArquivo);
                } catch (IOException ex) {
                    Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing
    
    //Ao clicar no botão de salvar, salva a execução corrente.
    private void salvarBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarBotaoActionPerformed
        ManipulaTabelas Manip = new ManipulaTabelas(this,null);
        ArrayList<Veiculo> listaCarros = Manip.getListaCarros();
        ManipuladorDeArquivos manip = new ManipuladorDeArquivos();
  
        Relatorio rel = new Relatorio();
        rel.getInstance();
        
        int n = JOptionPane.showConfirmDialog(this,"Salvar execução?","Salvar?",JOptionPane.YES_NO_OPTION);
        if(n==0){
            try {
                manip.salvarExecucao(listaCarros,getHorarioInicio());
            } catch (IOException ex) {
                Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
            }
             JOptionPane.showMessageDialog(this,"Execução salva com sucesso!" ,"Sucesso!",JOptionPane.INFORMATION_MESSAGE);
            }
        
        
    }//GEN-LAST:event_salvarBotaoActionPerformed
    
    //retorna o horário de inicio da execução.
    public String getHorarioInicio(){
        return horarioInicio.getText();
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visual().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirBotao;
    private javax.swing.JButton botaoOKID;
    private javax.swing.JButton botaoOKProcurar;
    private javax.swing.JButton entrarBotao;
    private javax.swing.JButton fimBotao;
    private javax.swing.JLabel horarioInicio;
    private javax.swing.JLabel horarioReinicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labelChassi;
    private javax.swing.JLabel labelID;
    private javax.swing.JButton pesquisarBotao;
    private javax.swing.JButton relatoriosBotao;
    private javax.swing.JButton sairBotao;
    private javax.swing.JButton salvarBotao;
    public javax.swing.JTable tabelaCarros;
    public javax.swing.JTable tabelaVagas;
    private javax.swing.JTextField textoChassi;
    private javax.swing.JTextField textoID;
    private javax.swing.JLabel textoInicio;
    private javax.swing.JLabel textoReinicio;
    // End of variables declaration//GEN-END:variables
    

}
